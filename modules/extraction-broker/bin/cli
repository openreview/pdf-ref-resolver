#!/bin/bash
# shellcheck disable=2154
#
# ARGBASH_SET_INDENT([  ])
# DEFINE_SCRIPT_DIR([_script_dir])
#
# ARG_OPTIONAL_SINGLE([env],[],[Env Mode],[dev])
# ARG_TYPE_GROUP_SET([envmode],[ENVMODE],[env],[dev,test,prod],[])
# ARG_LEFTOVERS([])
#
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}

# validators

envmode()
{
  local _allowed=("dev" "test" "prod") _seeking="$1"
  for element in "${_allowed[@]}"
  do
    test "$element" = "$_seeking" && echo "$element" && return 0
  done
  die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'dev', 'test' and 'prod'" 4
}


begins_with_short_option()
{
  local first_option all_short_options=''
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_leftovers=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_env="dev"


print_help()
{
  printf 'Usage: %s [--env <ENVMODE>] ... \n' "$0"
  printf '\t%s\n' "--env: Env Mode. Can be one of: 'dev', 'test' and 'prod' (default: 'dev')"
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      --env)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_env="$(envmode "$2" "env")" || exit 1
        shift
        ;;
      --env=*)
        _arg_env="$(envmode "${_key##--env=}" "env")" || exit 1
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names=""
  _our_args=$((${#_positionals[@]} - 0))
  for ((ii = 0; ii < _our_args; ii++))
  do
    _positional_names="$_positional_names _arg_leftovers[$((ii + 0))]"
  done

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
_script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || { echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2; exit 2; }
# Validation of values


### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#
readonly script_dir="$_script_dir"
source "$script_dir/_utils.sh"

readonly climain="./dist/main"

arg env

export NODE_ENV="$env"
doit node "$climain" "${_arg_leftovers[@]}"

# ] <-- needed because of Argbash
